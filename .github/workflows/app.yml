name: Build e Teste backend-creditos

# Aqui cont√©m o trigger da nossa pipeline:
# ==============================================================================================
# Nesse ponto:
# üîÑ Sempre que houver um push na branch "main" ou quando um pull request for aberto/atualizado
on:
  push:
    branches:
      - master
      # aqui poderia usar o padr√£o no nome da branch, por exemplo: - feature/*
  pull_request:
    branches:
      - master
  # usada para conseguir executar a pipeline manualmente...
  workflow_dispatch:

# Aqui estou definindo vari√°veis globais da pipeline, mas mesmo assim, s√£o utilizadas apenas a n√≠vel de STEPS...
env:
  SHOULD_RUN_TEST-INTEGRATION: true

# Aqui cont√©m os jobs (steps) da pipeline, ou seja, os passos de Build em ordem num√©rica:
# ==============================================================================================
# 1. ‚öôÔ∏è Usa o Ubuntu como ambiente de execu√ß√£o
# 2. üì• Fazer checkout do c√≥digo
# 3. ‚òï Configurar o JDK 21 (Temurin distribution)
# 4. üì¶ Configurar cache do Maven para builds mais r√°pidos
# 5. üöÄ Executar o build e testes usando o wrapper do Maven
jobs:
  build:
    # 1. definir o Sistema Operacional que ser√° utilizado
    runs-on: ubuntu-latest
    steps:

      # 2. √© um git clone do reposit√≥rio...
      - uses: actions/checkout@v4

      # 1. Adicionei um novo passo "Configurar permiss√µes do Maven wrapper" que
      # executa "chmod +x mvnw"
      - name: Configurar permiss√µes do Maven wrapper
        run: chmod +x mvnw

      # 3. Instalar o Java JDK 21...
      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          # 4. cache...
          cache: 'maven'
          # √© opcional e s√≥ √© necess√°rio em reposit√≥rios multi-m√≥dulos (multi-project), ou quando o arquivo `pom.xml` est√° fora da raiz do projeto
          # cache-dependency-path: 'sub-project/pom.xml'

      # 5. Build do microsservi√ßo (avan√ßando os testes unit√°rio e de integra√ß√£o)
      - name: Build (compilar projeto com Maven)
        run: ./mvnw clean package -DskipTests

      # 6. Gerar o arquivo `target/backend-creditos-0.0.1-SNAPSHOT.jar`.
      - name: Build da imagem Docker
        run: docker build -t backend-creditos .

  sonar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=jorgedoriajr_backend-creditos
      - name: Verificar Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test-unit:
    # o "needs" garante que s√≥ roda ap√≥s o build concluir...(O "needs" √© quando queremos fazer depend√™ncia entre Jobs no modo geral)
    #needs: build
    runs-on: ubuntu-latest
    # Uma outra forma de condicionar √© usando o "if". Nesse caso, estou condicionando a execu√ß√£o do Job "test-unit"
    # se o commit for realizado numa branch que come√ßar com `feature/`**.
    # (O "if" √© quando queremos fazer um condicionamento espec√≠fico, como no caso abaixo)
    #if: startsWith(github.ref, 'refs/heads/feature/')

    steps:
      - uses: actions/checkout@v4
      - name: Configurar permiss√µes do Maven wrapper
        run: chmod +x mvnw
      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          # √© opcional e s√≥ √© necess√°rio em reposit√≥rios multi-m√≥dulos (multi-project), ou quando o arquivo `pom.xml` est√° fora da raiz do projeto
          # cache-dependency-path: 'sub-project/pom.xml'

      # Criar a rede explicitamente antes do docker-compose up
      - name: Criar rede Docker para integra√ß√£o
        run: docker network create my_network || true

      # Subir os servi√ßos do docker-compose antes dos testes (Sobe seus containers, ex. banco/kafka)
      - name: Subir containers de infra necess√°rios com Docker Compose
        run: docker compose -f docker-compose.yml up -d postgres kafka zookeeper kafdrop

      # Espera alguns segundos para os containers ficarem prontos (ajuste se necess√°rio)
      - name: Aguardar servi√ßos subirem (opcional)
        run: sleep 15

      - name: Rodar apenas os testes unit√°rios
        run: ./mvnw test

      # DERRUBA os containers ap√≥s os testes
      - name: Derrubar containers
        if: always()
        run: docker compose -f docker-compose.yml down

  test-integration:
    # o "needs" garante que s√≥ roda ap√≥s o build concluir...
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Configurar permiss√µes do Maven wrapper
        run: chmod +x mvnw
      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          # √© opcional e s√≥ √© necess√°rio em reposit√≥rios multi-m√≥dulos (multi-project), ou quando o arquivo `pom.xml` est√° fora da raiz do projeto
          # cache-dependency-path: 'sub-project/pom.xml'

      # Criar a rede explicitamente antes do docker-compose up
      - name: Criar rede Docker para integra√ß√£o
        run: docker network create my_network || true

      # Subir os servi√ßos do docker-compose antes dos testes (Sobe seus containers, ex. banco/kafka)
      - name: Subir containers de infra necess√°rios com Docker Compose
        run: docker compose -f docker-compose.yml up -d postgres kafka zookeeper kafdrop

      # Espera alguns segundos para os containers ficarem prontos (ajuste se necess√°rio)
      - name: Aguardar servi√ßos subirem (opcional)
        run: sleep 15

      - name: Rodar apenas os testes de integra√ß√£o
        # Aqui est√° condicionamento espec√≠fico usando uma vari√°vel (obs: as vari√°vel s√≥ estar√£o dispon√≠veis a n√≠vel de steps e n√£o jobs)
        # Por exemplo, github.ref √© um tipo de vari√°vel utilizada a n√≠vel de Jobs
        if: ${{ env.SHOULD_RUN_TEST-INTEGRATION }}
        run: ./mvnw failsafe:integration-test failsafe:verify

      # DERRUBA os containers ap√≥s os testes
      - name: Derrubar containers
        if: always()
        run: docker compose -f docker-compose.yml down

  deploy:
    # Aqui o "needs" pode agrupar N depend√™ncias num array de Jobs...
    # Por√©m, ambos "needs" e "if" podem co-existir (existir no mesmo lugar...)
    needs: [build, test-unit, test-integration]
    # S√≥ faz deploy na master -> se os testes unit√°rio forem executados com sucesso,
    # se o build for executado com sucesso e se os testes de integra√ß√£o foram executados com sucesso tamb√©m.
    # Tem que avaliar todas as depend√™ncias dentro do array de jobs...
    # A vari√°vel "needs" em needs.test-unit.result faz refer√™ncia acima.
    # O diferente de !cancelled() serve para habilitar de forma correta o cancelamento da execu√ß√£o do Flow...
    if: (!cancelled()
      && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/master')
      && needs.build.result == success()
      && needs.test-unit.result == success()
      && needs.test-integration.result == success())
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configurar permiss√µes do Maven wrapper
        run: chmod +x mvnw

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          # para acidionar o cache, fui no google e pesquisei por "actions/setup-java" e localizei os valores para "cache" com CTRL+F
          cache: 'maven'
          # √© opcional e s√≥ √© necess√°rio em reposit√≥rios multi-m√≥dulos (multi-project), ou quando o arquivo `pom.xml` est√° fora da raiz do projeto
          # cache-dependency-path: 'sub-project/pom.xml'

      # Step para simular mensagem de deploying...
      - name: Enviando mensagem de deploying...
        run: echo "üöÄ Deploying aplica√ß√£o... Por favor, aguarde!"

      #- name: Build do projeto para produzir artefato (caso n√£o esteja com o √∫ltimo .jar)
      #  run: ./mvnw clean package -DskipTests

      # Exemplo: Deploy via SCP para servidor remoto
      #- name: Deploy do JAR para o Servidor
      #  uses: appleboy/scp-action@v0.1.7
      #  with:
      #    host: ${{ secrets.REMOTE_HOST }}
      #    username: ${{ secrets.REMOTE_USER }}
      #    key: ${{ secrets.REMOTE_KEY }}
      #    port: 22
      #    source: "target/nome-do-seu-produto.jar"
      #    target: "/caminho/para/a/pasta/no/servidor"

      # Esse √© um exemplo de execu√ß√£o remota para reiniciar o servi√ßo ap√≥s copiar o JAR
      #- name: Reiniciar aplica√ß√£o no servidor remoto via SSH
      #  uses: appleboy/ssh-action@v1.0.3
      #  with:
      #    host: ${{ secrets.REMOTE_HOST }}
      #    username: ${{ secrets.REMOTE_USER }}
      #    key: ${{ secrets.REMOTE_KEY }}
      #    port: 22
      #    script: |
      #      systemctl restart nome-do-seu-servico